# You can adjust ProxyPass & ProxyPassReverse to point at the servers you're proxying requests for
#   1a. By default, we're proxying all traffic to example.com -> 0.0.0.0:8443

# Optional: 
#     1. Replace the *'s with specific ipv4 addresses
#     2. Learn about mod_proxy: https://httpd.apache.org/docs/2.4/mod/mod_proxy.html

# We force all redirect all traffic from port 80 to secure port 443  
<VirtualHost *:80>
   ServerName http://proxy.localhost/
   Redirect / https://proxy.localhost/
</VirtualHost>
   
<VirtualHost *:443> 
        # This disables Apache operating as a forward-proxy
        # We want to use it as a reverse-proxy, thus it's turned off
        # reference: https://httpd.apache.org/docs/2.4/mod/mod_proxy.html#proxyrequests
        ServerName proxy.localhost
        ProxyRequests Off
        <Proxy *>
          Order deny,allow
          Allow from all
        </Proxy>
        
        # Enables TLS protocols and allows the reverse proxy to sign SSL certificates
        # We terminate tls by default, allowing us to pass unencrypted traffic to our hosts
        SSLEngine on
        SSLProxyEngine On
        # NOTE: Make sure you change the "example.com" in the filepath
        SSLCertificateFile /.light-certs/proxy.localhost/cert.pem
        SSLCertificateKeyFile /.light-certs/proxy.localhost/key.pem
        
        # The server on the we're proxying requests to
        # You can define multiple rules for routing traffic of various protocols to various servers
        ProxyPass / http://0.0.0.0:8443/
        ProxyPassReverse / http://0.0.0.0:8443/
         
        <Location />
          Order allow,deny
          Allow from all
        </Location>
</VirtualHost>
